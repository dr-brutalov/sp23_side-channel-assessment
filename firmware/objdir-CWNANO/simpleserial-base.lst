   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"simpleserial-base.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.get_key,"ax",%progbits
  16              		.align	1
  17              		.global	get_key
  18              		.arch armv6s-m
  19              		.syntax unified
  20              		.code	16
  21              		.thumb_func
  22              		.fpu softvfp
  24              	get_key:
  25              	.LVL0:
  26              	.LFB0:
  27              		.file 1 "simpleserial-base.c"
   1:simpleserial-base.c **** /*
   2:simpleserial-base.c ****     This file is part of the ChipWhisperer Example Targets
   3:simpleserial-base.c ****     Copyright (C) 2012-2017 NewAE Technology Inc.
   4:simpleserial-base.c **** 
   5:simpleserial-base.c ****     This program is free software: you can redistribute it and/or modify
   6:simpleserial-base.c ****     it under the terms of the GNU General Public License as published by
   7:simpleserial-base.c ****     the Free Software Foundation, either version 3 of the License, or
   8:simpleserial-base.c ****     (at your option) any later version.
   9:simpleserial-base.c **** 
  10:simpleserial-base.c ****     This program is distributed in the hope that it will be useful,
  11:simpleserial-base.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:simpleserial-base.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13:simpleserial-base.c ****     GNU General Public License for more details.
  14:simpleserial-base.c **** 
  15:simpleserial-base.c ****     You should have received a copy of the GNU General Public License
  16:simpleserial-base.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  17:simpleserial-base.c **** */
  18:simpleserial-base.c **** 
  19:simpleserial-base.c **** #include "hal.h"
  20:simpleserial-base.c **** #include <stdint.h>
  21:simpleserial-base.c **** #include <stdlib.h>
  22:simpleserial-base.c **** 
  23:simpleserial-base.c **** #include "simpleserial.h"
  24:simpleserial-base.c **** 
  25:simpleserial-base.c **** uint8_t get_key(uint8_t* k, uint8_t len)
  26:simpleserial-base.c **** {
  28              		.loc 1 26 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  27:simpleserial-base.c **** 	// Load key here
  28:simpleserial-base.c **** 	return 0x00;
  33              		.loc 1 28 2 view .LVU1
  29:simpleserial-base.c **** }
  34              		.loc 1 29 1 is_stmt 0 view .LVU2
  35 0000 0020     		movs	r0, #0
  36              	.LVL1:
  37              		.loc 1 29 1 view .LVU3
  38              		@ sp needed
  39 0002 7047     		bx	lr
  40              		.cfi_endproc
  41              	.LFE0:
  43              		.section	.text.get_pt,"ax",%progbits
  44              		.align	1
  45              		.global	get_pt
  46              		.syntax unified
  47              		.code	16
  48              		.thumb_func
  49              		.fpu softvfp
  51              	get_pt:
  52              	.LVL2:
  53              	.LFB1:
  30:simpleserial-base.c **** 
  31:simpleserial-base.c **** uint8_t get_pt(uint8_t* pt, uint8_t len)
  32:simpleserial-base.c **** {
  54              		.loc 1 32 1 is_stmt 1 view -0
  55              		.cfi_startproc
  56              		@ args = 0, pretend = 0, frame = 8
  57              		@ frame_needed = 0, uses_anonymous_args = 0
  33:simpleserial-base.c **** 	/**********************************
  34:simpleserial-base.c **** 	* Start user-specific code here. */
  35:simpleserial-base.c **** 	trigger_high();
  58              		.loc 1 35 2 view .LVU5
  32:simpleserial-base.c **** 	/**********************************
  59              		.loc 1 32 1 is_stmt 0 view .LVU6
  60 0000 13B5     		push	{r0, r1, r4, lr}
  61              	.LCFI0:
  62              		.cfi_def_cfa_offset 16
  63              		.cfi_offset 0, -16
  64              		.cfi_offset 1, -12
  65              		.cfi_offset 4, -8
  66              		.cfi_offset 14, -4
  32:simpleserial-base.c **** 	/**********************************
  67              		.loc 1 32 1 view .LVU7
  68 0002 0400     		movs	r4, r0
  36:simpleserial-base.c **** 
  37:simpleserial-base.c **** 	volatile long int A = 0x2BAA;
  38:simpleserial-base.c **** 
  39:simpleserial-base.c ****     A += 2;
  40:simpleserial-base.c ****     A += 2;
  41:simpleserial-base.c ****     A += 2;
  42:simpleserial-base.c ****     A += 2;
  43:simpleserial-base.c ****     A += 2;
  44:simpleserial-base.c ****     A += 2;
  45:simpleserial-base.c ****     A += 2;
  46:simpleserial-base.c ****     A += 2;
  47:simpleserial-base.c ****     A += 2;
  48:simpleserial-base.c ****     A += 2;
  49:simpleserial-base.c ****     A += 2;
  50:simpleserial-base.c ****     A += 2;
  51:simpleserial-base.c ****     A += 2;
  52:simpleserial-base.c ****     A += 2;
  53:simpleserial-base.c ****     A += 2;
  54:simpleserial-base.c ****     A += 2;
  55:simpleserial-base.c **** 
  56:simpleserial-base.c **** 	trigger_low();
  57:simpleserial-base.c **** 	/* End user-specific code here. *
  58:simpleserial-base.c **** 	********************************/
  59:simpleserial-base.c **** 	simpleserial_put('r', 16, pt);
  60:simpleserial-base.c **** 	return 0x00;
  61:simpleserial-base.c **** }
  69              		.loc 1 61 1 view .LVU8
  70              		@ sp needed
  35:simpleserial-base.c **** 
  71              		.loc 1 35 2 view .LVU9
  72 0004 FFF7FEFF 		bl	trigger_high
  73              	.LVL3:
  37:simpleserial-base.c **** 
  74              		.loc 1 37 2 is_stmt 1 view .LVU10
  37:simpleserial-base.c **** 
  75              		.loc 1 37 20 is_stmt 0 view .LVU11
  76 0008 1D4B     		ldr	r3, .L3
  77 000a 0193     		str	r3, [sp, #4]
  39:simpleserial-base.c ****     A += 2;
  78              		.loc 1 39 5 is_stmt 1 view .LVU12
  39:simpleserial-base.c ****     A += 2;
  79              		.loc 1 39 7 is_stmt 0 view .LVU13
  80 000c 019B     		ldr	r3, [sp, #4]
  81 000e 0233     		adds	r3, r3, #2
  82 0010 0193     		str	r3, [sp, #4]
  40:simpleserial-base.c ****     A += 2;
  83              		.loc 1 40 5 is_stmt 1 view .LVU14
  40:simpleserial-base.c ****     A += 2;
  84              		.loc 1 40 7 is_stmt 0 view .LVU15
  85 0012 019B     		ldr	r3, [sp, #4]
  86 0014 0233     		adds	r3, r3, #2
  87 0016 0193     		str	r3, [sp, #4]
  41:simpleserial-base.c ****     A += 2;
  88              		.loc 1 41 5 is_stmt 1 view .LVU16
  41:simpleserial-base.c ****     A += 2;
  89              		.loc 1 41 7 is_stmt 0 view .LVU17
  90 0018 019B     		ldr	r3, [sp, #4]
  91 001a 0233     		adds	r3, r3, #2
  92 001c 0193     		str	r3, [sp, #4]
  42:simpleserial-base.c ****     A += 2;
  93              		.loc 1 42 5 is_stmt 1 view .LVU18
  42:simpleserial-base.c ****     A += 2;
  94              		.loc 1 42 7 is_stmt 0 view .LVU19
  95 001e 019B     		ldr	r3, [sp, #4]
  96 0020 0233     		adds	r3, r3, #2
  97 0022 0193     		str	r3, [sp, #4]
  43:simpleserial-base.c ****     A += 2;
  98              		.loc 1 43 5 is_stmt 1 view .LVU20
  43:simpleserial-base.c ****     A += 2;
  99              		.loc 1 43 7 is_stmt 0 view .LVU21
 100 0024 019B     		ldr	r3, [sp, #4]
 101 0026 0233     		adds	r3, r3, #2
 102 0028 0193     		str	r3, [sp, #4]
  44:simpleserial-base.c ****     A += 2;
 103              		.loc 1 44 5 is_stmt 1 view .LVU22
  44:simpleserial-base.c ****     A += 2;
 104              		.loc 1 44 7 is_stmt 0 view .LVU23
 105 002a 019B     		ldr	r3, [sp, #4]
 106 002c 0233     		adds	r3, r3, #2
 107 002e 0193     		str	r3, [sp, #4]
  45:simpleserial-base.c ****     A += 2;
 108              		.loc 1 45 5 is_stmt 1 view .LVU24
  45:simpleserial-base.c ****     A += 2;
 109              		.loc 1 45 7 is_stmt 0 view .LVU25
 110 0030 019B     		ldr	r3, [sp, #4]
 111 0032 0233     		adds	r3, r3, #2
 112 0034 0193     		str	r3, [sp, #4]
  46:simpleserial-base.c ****     A += 2;
 113              		.loc 1 46 5 is_stmt 1 view .LVU26
  46:simpleserial-base.c ****     A += 2;
 114              		.loc 1 46 7 is_stmt 0 view .LVU27
 115 0036 019B     		ldr	r3, [sp, #4]
 116 0038 0233     		adds	r3, r3, #2
 117 003a 0193     		str	r3, [sp, #4]
  47:simpleserial-base.c ****     A += 2;
 118              		.loc 1 47 5 is_stmt 1 view .LVU28
  47:simpleserial-base.c ****     A += 2;
 119              		.loc 1 47 7 is_stmt 0 view .LVU29
 120 003c 019B     		ldr	r3, [sp, #4]
 121 003e 0233     		adds	r3, r3, #2
 122 0040 0193     		str	r3, [sp, #4]
  48:simpleserial-base.c ****     A += 2;
 123              		.loc 1 48 5 is_stmt 1 view .LVU30
  48:simpleserial-base.c ****     A += 2;
 124              		.loc 1 48 7 is_stmt 0 view .LVU31
 125 0042 019B     		ldr	r3, [sp, #4]
 126 0044 0233     		adds	r3, r3, #2
 127 0046 0193     		str	r3, [sp, #4]
  49:simpleserial-base.c ****     A += 2;
 128              		.loc 1 49 5 is_stmt 1 view .LVU32
  49:simpleserial-base.c ****     A += 2;
 129              		.loc 1 49 7 is_stmt 0 view .LVU33
 130 0048 019B     		ldr	r3, [sp, #4]
 131 004a 0233     		adds	r3, r3, #2
 132 004c 0193     		str	r3, [sp, #4]
  50:simpleserial-base.c ****     A += 2;
 133              		.loc 1 50 5 is_stmt 1 view .LVU34
  50:simpleserial-base.c ****     A += 2;
 134              		.loc 1 50 7 is_stmt 0 view .LVU35
 135 004e 019B     		ldr	r3, [sp, #4]
 136 0050 0233     		adds	r3, r3, #2
 137 0052 0193     		str	r3, [sp, #4]
  51:simpleserial-base.c ****     A += 2;
 138              		.loc 1 51 5 is_stmt 1 view .LVU36
  51:simpleserial-base.c ****     A += 2;
 139              		.loc 1 51 7 is_stmt 0 view .LVU37
 140 0054 019B     		ldr	r3, [sp, #4]
 141 0056 0233     		adds	r3, r3, #2
 142 0058 0193     		str	r3, [sp, #4]
  52:simpleserial-base.c ****     A += 2;
 143              		.loc 1 52 5 is_stmt 1 view .LVU38
  52:simpleserial-base.c ****     A += 2;
 144              		.loc 1 52 7 is_stmt 0 view .LVU39
 145 005a 019B     		ldr	r3, [sp, #4]
 146 005c 0233     		adds	r3, r3, #2
 147 005e 0193     		str	r3, [sp, #4]
  53:simpleserial-base.c ****     A += 2;
 148              		.loc 1 53 5 is_stmt 1 view .LVU40
  53:simpleserial-base.c ****     A += 2;
 149              		.loc 1 53 7 is_stmt 0 view .LVU41
 150 0060 019B     		ldr	r3, [sp, #4]
 151 0062 0233     		adds	r3, r3, #2
 152 0064 0193     		str	r3, [sp, #4]
  54:simpleserial-base.c **** 
 153              		.loc 1 54 5 is_stmt 1 view .LVU42
  54:simpleserial-base.c **** 
 154              		.loc 1 54 7 is_stmt 0 view .LVU43
 155 0066 019B     		ldr	r3, [sp, #4]
 156 0068 0233     		adds	r3, r3, #2
 157 006a 0193     		str	r3, [sp, #4]
  56:simpleserial-base.c **** 	/* End user-specific code here. *
 158              		.loc 1 56 2 is_stmt 1 view .LVU44
 159 006c FFF7FEFF 		bl	trigger_low
 160              	.LVL4:
  59:simpleserial-base.c **** 	return 0x00;
 161              		.loc 1 59 2 view .LVU45
 162 0070 2200     		movs	r2, r4
 163 0072 1021     		movs	r1, #16
 164 0074 7220     		movs	r0, #114
 165 0076 FFF7FEFF 		bl	simpleserial_put
 166              	.LVL5:
  60:simpleserial-base.c **** }
 167              		.loc 1 60 2 view .LVU46
 168              		.loc 1 61 1 is_stmt 0 view .LVU47
 169 007a 0020     		movs	r0, #0
 170              	.LVL6:
 171              		.loc 1 61 1 view .LVU48
 172 007c 16BD     		pop	{r1, r2, r4, pc}
 173              	.L4:
 174 007e C046     		.align	2
 175              	.L3:
 176 0080 AA2B0000 		.word	11178
 177              		.cfi_endproc
 178              	.LFE1:
 180              		.section	.text.reset,"ax",%progbits
 181              		.align	1
 182              		.global	reset
 183              		.syntax unified
 184              		.code	16
 185              		.thumb_func
 186              		.fpu softvfp
 188              	reset:
 189              	.LFB5:
 190              		.cfi_startproc
 191              		@ args = 0, pretend = 0, frame = 0
 192              		@ frame_needed = 0, uses_anonymous_args = 0
 193              		@ link register save eliminated.
 194 0000 0020     		movs	r0, #0
 195              		@ sp needed
 196 0002 7047     		bx	lr
 197              		.cfi_endproc
 198              	.LFE5:
 200              		.section	.text.startup.main,"ax",%progbits
 201              		.align	1
 202              		.global	main
 203              		.syntax unified
 204              		.code	16
 205              		.thumb_func
 206              		.fpu softvfp
 208              	main:
 209              	.LFB3:
  62:simpleserial-base.c **** 
  63:simpleserial-base.c **** uint8_t reset(uint8_t* x, uint8_t len)
  64:simpleserial-base.c **** {
  65:simpleserial-base.c **** 	// Reset key here if needed
  66:simpleserial-base.c **** 	return 0x00;
  67:simpleserial-base.c **** }
  68:simpleserial-base.c **** 
  69:simpleserial-base.c **** #if SS_VER == SS_VER_2_1
  70:simpleserial-base.c **** uint8_t aes(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *buf)
  71:simpleserial-base.c **** {
  72:simpleserial-base.c ****     uint8_t req_len = 0;
  73:simpleserial-base.c ****     uint8_t err = 0;
  74:simpleserial-base.c **** 
  75:simpleserial-base.c ****     if (scmd & 0x02) {
  76:simpleserial-base.c ****         req_len += 16;
  77:simpleserial-base.c ****         if (req_len > len) {
  78:simpleserial-base.c ****             return SS_ERR_LEN;
  79:simpleserial-base.c ****         }
  80:simpleserial-base.c ****         err = get_key(buf + req_len - 16, 16);
  81:simpleserial-base.c ****         if (err)
  82:simpleserial-base.c ****             return err;
  83:simpleserial-base.c ****     }
  84:simpleserial-base.c ****     if (scmd & 0x01) {
  85:simpleserial-base.c ****         req_len += 16;
  86:simpleserial-base.c ****         if (req_len > len) {
  87:simpleserial-base.c ****             return SS_ERR_LEN;
  88:simpleserial-base.c ****         }
  89:simpleserial-base.c ****         err = get_pt(buf + req_len - 16, 16);
  90:simpleserial-base.c ****         if (err)
  91:simpleserial-base.c ****             return err;
  92:simpleserial-base.c ****     }
  93:simpleserial-base.c **** 
  94:simpleserial-base.c ****     if (len != req_len) {
  95:simpleserial-base.c ****         return SS_ERR_LEN;
  96:simpleserial-base.c ****     }
  97:simpleserial-base.c **** 
  98:simpleserial-base.c ****     return 0x00;
  99:simpleserial-base.c **** 
 100:simpleserial-base.c **** }
 101:simpleserial-base.c **** #endif
 102:simpleserial-base.c **** 
 103:simpleserial-base.c **** int main(void)
 104:simpleserial-base.c **** {
 210              		.loc 1 104 1 is_stmt 1 view -0
 211              		.cfi_startproc
 212              		@ Volatile: function does not return.
 213              		@ args = 0, pretend = 0, frame = 0
 214              		@ frame_needed = 0, uses_anonymous_args = 0
 105:simpleserial-base.c ****     platform_init();
 215              		.loc 1 105 5 view .LVU50
 104:simpleserial-base.c ****     platform_init();
 216              		.loc 1 104 1 is_stmt 0 view .LVU51
 217 0000 10B5     		push	{r4, lr}
 218              	.LCFI1:
 219              		.cfi_def_cfa_offset 8
 220              		.cfi_offset 4, -8
 221              		.cfi_offset 14, -4
 222              		.loc 1 105 5 view .LVU52
 223 0002 FFF7FEFF 		bl	platform_init
 224              	.LVL7:
 106:simpleserial-base.c **** 	init_uart();
 225              		.loc 1 106 2 is_stmt 1 view .LVU53
 226 0006 FFF7FEFF 		bl	init_uart
 227              	.LVL8:
 107:simpleserial-base.c **** 	trigger_setup();
 228              		.loc 1 107 2 view .LVU54
 229 000a FFF7FEFF 		bl	trigger_setup
 230              	.LVL9:
 108:simpleserial-base.c **** 
 109:simpleserial-base.c ****  	/* Uncomment this to get a HELLO message for debug */
 110:simpleserial-base.c **** 	/*
 111:simpleserial-base.c **** 	putch('h');
 112:simpleserial-base.c **** 	putch('e');
 113:simpleserial-base.c **** 	putch('l');
 114:simpleserial-base.c **** 	putch('l');
 115:simpleserial-base.c **** 	putch('o');
 116:simpleserial-base.c **** 	putch('\n');
 117:simpleserial-base.c **** 	*/
 118:simpleserial-base.c **** 
 119:simpleserial-base.c **** 	simpleserial_init();
 231              		.loc 1 119 2 view .LVU55
 232 000e FFF7FEFF 		bl	simpleserial_init
 233              	.LVL10:
 120:simpleserial-base.c **** #if SS_VER != SS_VER_2_1
 121:simpleserial-base.c **** 	simpleserial_addcmd('p', 16, get_pt);
 234              		.loc 1 121 2 view .LVU56
 235 0012 1021     		movs	r1, #16
 236 0014 084A     		ldr	r2, .L8
 237 0016 7020     		movs	r0, #112
 238 0018 FFF7FEFF 		bl	simpleserial_addcmd
 239              	.LVL11:
 122:simpleserial-base.c **** 	simpleserial_addcmd('k', 16, get_key);
 240              		.loc 1 122 2 view .LVU57
 241 001c 1021     		movs	r1, #16
 242 001e 074A     		ldr	r2, .L8+4
 243 0020 6B20     		movs	r0, #107
 244 0022 FFF7FEFF 		bl	simpleserial_addcmd
 245              	.LVL12:
 123:simpleserial-base.c **** 	simpleserial_addcmd('x', 0, reset);
 246              		.loc 1 123 2 view .LVU58
 247 0026 0021     		movs	r1, #0
 248 0028 7820     		movs	r0, #120
 249 002a 054A     		ldr	r2, .L8+8
 250 002c FFF7FEFF 		bl	simpleserial_addcmd
 251              	.LVL13:
 252              	.L7:
 124:simpleserial-base.c **** #else
 125:simpleserial-base.c ****     simpleserial_addcmd(0x01, 16, aes);
 126:simpleserial-base.c **** 
 127:simpleserial-base.c **** #endif
 128:simpleserial-base.c **** 	while(1)
 253              		.loc 1 128 2 discriminator 1 view .LVU59
 129:simpleserial-base.c **** 		simpleserial_get();
 254              		.loc 1 129 3 discriminator 1 view .LVU60
 255 0030 FFF7FEFF 		bl	simpleserial_get
 256              	.LVL14:
 128:simpleserial-base.c **** 		simpleserial_get();
 257              		.loc 1 128 7 discriminator 1 view .LVU61
 258 0034 FCE7     		b	.L7
 259              	.L9:
 260 0036 C046     		.align	2
 261              	.L8:
 262 0038 00000000 		.word	get_pt
 263 003c 00000000 		.word	get_key
 264 0040 00000000 		.word	reset
 265              		.cfi_endproc
 266              	.LFE3:
 268              		.text
 269              	.Letext0:
 270              		.file 2 "../firmware/hal/hal.h"
 271              		.file 3 "../firmware/hal/stm32f0/stm32f0_hal.h"
 272              		.file 4 "../firmware/simpleserial/simpleserial.h"
 273              		.file 5 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 simpleserial-base.c
     /tmp/ccTldvhH.s:16     .text.get_key:0000000000000000 $t
     /tmp/ccTldvhH.s:24     .text.get_key:0000000000000000 get_key
     /tmp/ccTldvhH.s:44     .text.get_pt:0000000000000000 $t
     /tmp/ccTldvhH.s:51     .text.get_pt:0000000000000000 get_pt
     /tmp/ccTldvhH.s:176    .text.get_pt:0000000000000080 $d
     /tmp/ccTldvhH.s:181    .text.reset:0000000000000000 $t
     /tmp/ccTldvhH.s:188    .text.reset:0000000000000000 reset
     /tmp/ccTldvhH.s:201    .text.startup.main:0000000000000000 $t
     /tmp/ccTldvhH.s:208    .text.startup.main:0000000000000000 main
     /tmp/ccTldvhH.s:262    .text.startup.main:0000000000000038 $d

UNDEFINED SYMBOLS
trigger_high
trigger_low
simpleserial_put
platform_init
init_uart
trigger_setup
simpleserial_init
simpleserial_addcmd
simpleserial_get
